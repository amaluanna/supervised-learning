# -*- coding: utf-8 -*-
"""intermediate assessment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KQKo8Y8LhARKX9xFjVRMk_2fbprTh8-G
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data1=pd.read_csv('/content/test_lAUu6dG.csv')

data1.head()

data=pd.read_csv('/content/train_ctrUa4K.csv')

data.head()

data1.info()

data.info()

data1.dtypes

data.dtypes

data1.describe()

data.describe()

data1.describe

data1.isna().sum()

data.isna().sum()

data1.columns

data.columns

freqgraph=data.select_dtypes(include=['float'])
freqgraph.hist(figsize=(20,15))
plt.show()

for col in ['CoapplicantIncome', 'LoanAmount',
       'Loan_Amount_Term', 'Credit_History']:
       data[col]=data[col].fillna(data[col].median())

data.isna().sum()

for col in ['Gender', 'Married', 'Dependents',
       'Self_Employed']:
       data[col]=data[col].fillna(data[col].mode()[0])

data.isna().sum()

data.boxplot()

plt.boxplot(data['ApplicantIncome'])
plt.show()

q1=data['ApplicantIncome'].quantile(0.25)
q2=data['ApplicantIncome'].quantile(0.5)
q3=data['ApplicantIncome'].quantile(0.75)

print(q1,q2,q3)

iqr=q3-q1
LC=q1-(1.5*iqr)
UC=q3+(1.5*iqr)

print(iqr,LC,UC)

data[(data['ApplicantIncome']<LC)|(data['ApplicantIncome']>UC)].index

data.drop([ 9,  34,  54,  67, 102, 106, 115, 119, 126, 128, 130, 138, 144, 146,
       155, 171, 183, 185, 191, 199, 254, 258, 271, 278, 284, 308, 324, 333,
       369, 370, 409, 424, 432, 438, 443, 467, 475, 478, 483, 487, 493, 506,
       509, 525, 533, 534, 561, 572, 594, 604])

# label encoding

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
data['Gender']=le.fit_transform(data['Gender'])
data['Married']=le.fit_transform(data['Married'])
data['Education']=le.fit_transform(data['Education'])
data['Education']=le.fit_transform(data['Education'])
data['Self_Employed']=le.fit_transform(data['Self_Employed'])
data['Loan_Status']=le.fit_transform(data['Loan_Status'])
data['Property_Area']=le.fit_transform(data['Property_Area'])

data.head()

# linear regression

x=data.drop(columns=['Loan_ID', 'Loan_Status'])
y=data['Loan_Status']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

x_train

y_train

x_test

y_test

from sklearn.linear_model import LinearRegression
lr=LinearRegression()

model=lr.fit(x_train,y_train)

pred=model.predict(x_test)

from sklearn.metrics import mean_squared_error
print('mse=',mean_squared_error(y_test,pred))

from sklearn.metrics import mean_absolute_error
print('mae=',mean_absolute_error(y_test,pred))

from sklearn.metrics import r2_score
print('r2_score=',r2_score(y_test,pred))

# svm model

from sklearn.svm import SVC
sv_clf=SVC()
sv_clf.fit(x_train,y_train)

y_pred=sv_clf.predict(x_test)

from sklearn.metrics import accuracy_score,confusion_matrix
print('Accuracy is =',accuracy_score(y_test,y_pred))

#random forest classifier

from sklearn.ensemble import RandomForestClassifier
rf_clf=RandomForestClassifier(random_state=42)
rf_clf.fit(x_train,y_train)

y_pred=rf_clf.predict(x_test)

print('Accuracy is= ',accuracy_score(y_test,y_pred))

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

X_train = data.drop(columns=['Loan_ID', 'Loan_Status'])
y_train = data['Loan_Status']

model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

X_test = data.drop(columns=['Loan_ID', 'Loan_Status'])
y_test= data['Loan_Status']

y_pred = model.predict(X_test)

print(f'Accuracy: {accuracy_score(y_test, y_pred)}')
print(f'Classification Report:\n{classification_report(y_test, y_pred)}')



